PyAuthenNTLM2 is a module that enables Apache to carry out authentication by
means of the NTLM protocol and a separate Domain Controller or Active
Directory server.

Introduction
============

The specific use case of PyAuthenNTLM2 is the following:

 * Users have valid accounts in an existing Windows domain, and you want such
   credentials to be used for HTTP authentication.
 * Apache runs on a server that is not part of the Windows domain.
 * Some of the users cannot use Kerberos. For instance, they connect via a proxy
   or they use machines that are not part of the domain. However, their client
   supports NTLM (all browsers do nowadays).
 * Some of the users can only use Basic, not even NTLM (possibly because they
   don't use a browser).
 * [EXPERIMENTAL] Only users that belong to certain groups are authorized.

Although Kerberos (including its Microsoft variant "Integrated Windows
Authentication") is the best option in terms of security for HTTP
authentication, the venerable NTLM protocol is still a good compromise, much
better than the widespread Basic protocol and marginally better than Digest.
With Basic, anybody can pick up your password from the messages sent to the
server (unless you use TLS), whereas with Digest the web server needs local
access to the actual password. With NTLM, the webserver can relay every
authorization requests to the (Domain Controller or Active Directory server):
it never has to neither see nor store the real passwords.

Note that NTLMv1 is based on cryptography that by today standards is very weak.
Ensure that your clients always use NTLMv2 [6]. PyAuthenNTLM2 handles equally well
all the various NTLM variants (such as NTLMv2 Session, and NTLMv2).

PyAuthenNTLM2 allows clients to authenticate via two schemes: NTLM or Basic.

Requirements
============

* Mod-python [4]
* Python 2.x
* Apache 2.x
* PyCrypto 2.x (not required, but Basic auth will not be supported without it)

Test was carried out with:
 - a server with mod-python 3.3.1, Apache 2.2, and Python 2.6. 
 - clients with Internet Explorer 7/8, Firefox 7.0, and Chrome.
 - Windows 2003 Domain Controller and Active Directory server

Installation
============

python setup.py install

Usage
=====
Usage is best shown by an example of Apache configuration:

<Directory /var/lib/some_directory>

    AuthType NTLM
    AuthName WDOMAIN
    require valid-user

    PythonAuthenHandler pyntlm
    PythonOption Domain WDOMAIN
    PythonOption PDC 192.1.2.45
    PythonOption BDC 192.1.2.46

    # Bypass authentication for local clients.
    # Comment these lines if they should authenticate too.
    Order deny,allow
    Deny  from all
    Allow from 127.0.0.1
    Satify any

</Directory>

All non-local clients trying to access a URI mapped under the directory
/var/lib/some_directory will be asked for credentials valid in the Windows
Domain WDOMAIN. The user name to enter need to be in the format:
wdomain\useridentifier (for instance windom\jbrown).

Local clients (that is, those connecting from 127.0.0.1) will not be presented
with any request for authentication.

The following options exist:

* AuthType NTLM                     Always specify it like this.
* require valid-user                Always specify it like this.
* AuthName [domain]                 Replace [domain] with the domain name to
                                    present to users in the pop-up dialog.
* PythonAuthenHandler [pyntlm.py]   Replace [pyntlm.py] with the complete,
                                    absolute path to the pyntlm.py script.
* PythonOption Domain [domain]      Replace [domain] with the Windows domain
                                    name (uppercase).
* PythonOption PDC [pdc]            Replace [pdc] with the address of the
                                    Primary Domain Controller (either IP or DNS
                                    name).
* PythonOption BDC [bdc]            Replace [bdc] with the address of the Backup
                                    Domain Controller (either IP or DNS name).
                                    This entry is optional.

Apache needs to be configured to send keep alives (directive 'KeepAlive On').

For SSL-protected sites, comment out the statement:

	SetEnvIf User-Agent ".*MSIE.*" \
             nokeepalive ssl-unclean-shutdown \
             downgrade-1.0 force-response-1.0

from the default Apache virtual host, or Internet Explorer will not manage to
make use of NTLM.

Experimental
------------
The [pdc]/[bdc] settings may also refer to an Active Directory server.
The syntax becomes slightly more complex:

    ldap://server[/baseDN]

where 'server' is the IP or DNS name of the Active Directory server, and the
optional 'baseDN' is the base Distinguished Name for the queries (only needed
for authorization, see below). For instance:

    ldap://10.12.13.1/DC=nasa,DC=gov

or equivalently (but more in compliance to RFC4516):

    ldap://10.12.13.1/DC%3Dnasa%2CDC%3Dgov

When using an Active Directory server, it is also possible to check if the
user is authorized to access page. More precisely, it is possible to grant
access only if the user is member of one group.

The option 'ADGroups' in the Apache configuration can be used to pass the
comma-separated list of groups the user must be part of. The group identifier
is the logon name, that is, the 'sAMAccountName' attribute in Active Driectory.

For instance, if you specified: 

<Directory /var/lib/some_directory>
	[ ... ]
    PythonOption ADGroups "Administrators,Power Users"
	[ ... ]
</Directory>

Only users that belong to Adminstrators or PowerUsers will be granted access.
A user that does not belong to any of such groups is denied access, even if
its credentials were correct.

Logging
=======

All logs will show up in the Apache log file.

Thanks
======

Microsoft for the large amount of technical specifications about NTLM and SMB
it disclosed [1].
Eric Glass for his long article about NTLM [2]. In several ways, it is more
complete and precise than [1].
Gerald Ritcher and Shannon Eric Peevey for AuthenNTLM [3], which inspired this
module.

Contacts
========

Send an email to Legrandin <gooksankoo@hoiptorrow.mailexpire.com> or drop a
message at https://github.com/Legrandin/PyAuthenNTLM2.

References
==========

[1] http://msdn.microsoft.com/en-us/library/gg258393%28v=PROT.13%29.aspx
[2] http://davenport.sourceforge.net/ntlm.html
[3] http://search.cpan.org/~speeves/Apache2-AuthenNTLM-0.02/AuthenNTLM.pm
[4] http://www.modpython.org
[5] http://technet.microsoft.com/en-us/magazine/2006.08.securitywatch.aspx
[6] http://support.microsoft.com/kb/239869

<<<<<<< HEAD
TODO
====
Since mod-python is not that active anymore, port it to modwsgi.
Add support for lighttpd.
=======
>>>>>>> master

